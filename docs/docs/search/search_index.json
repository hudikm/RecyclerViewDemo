{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00davod \u00b6 Cvi\u010denie : \u00dalohou cvi\u010denia je vytvori\u0165 aplik\u00e1ciu kuch\u00e1rska kniha, ktor\u00e1 bude pozost\u00e1va\u0165 z dvoch obrazoviek. Pr\u00e1va hlavn\u00e1 obrazovka bude obsahova\u0165 zoznam receptov a druh\u00e1 bu zobrazova\u0165 detail o recepte. Na aplik\u00e1ciu su kladen\u00e9 tieto po\u017eiadavky: Aplikacia pou\u017eije dynamick\u00fd layoutu a to konkr\u00e9tne Recyclerview. Tento prvok bude zobrazova\u0165 zoznam receptov. Obrazovky u\u017eivatelsk\u00e9ho rozhrania bud\u00fa tvoren\u00e9 z dvoch fragmentov: ListFagment, DetailFragment. \u010co je to Recycleview? \u00b6 RecyclerView je pokro\u010dilej\u0161ia a flexibilnej\u0161ia verzia ListView dynamick\u00e9ho layoutu Efekt\u00edvny na zobrazovanie ve\u013ek\u00e9ho mno\u017estvo d\u00e1t, ktor\u00e9 s\u00fa ulo\u017een\u00e9 v \u201erolovacom\u201c zozname. Pri zobrazovan\u00ed automaticky vyu\u017e\u00edva ViewHolder n\u00e1vrhov\u00fd vzor. RecyclerView zjednodu\u0161uje zobrazovanie a spr\u00e1vu ve\u013ek\u00fdch d\u00e1t za pomoci: Layout mana\u017e\u00e9ra ur\u010den\u00e9ho na zobrazovanie polo\u017eiek \u0160tandardn\u00fdch anim\u00e1ci\u00ed pre z\u00e1kladn\u00e9 oper\u00e1cie s prvkami(pridanie odobranie prvkov Zlo\u017eenie RecyclerView Info Viac info o RecyclerView ext. zdroj Viac info o RecyclerView na developer.android.com","title":"\u00davod"},{"location":"#uvod","text":"Cvi\u010denie : \u00dalohou cvi\u010denia je vytvori\u0165 aplik\u00e1ciu kuch\u00e1rska kniha, ktor\u00e1 bude pozost\u00e1va\u0165 z dvoch obrazoviek. Pr\u00e1va hlavn\u00e1 obrazovka bude obsahova\u0165 zoznam receptov a druh\u00e1 bu zobrazova\u0165 detail o recepte. Na aplik\u00e1ciu su kladen\u00e9 tieto po\u017eiadavky: Aplikacia pou\u017eije dynamick\u00fd layoutu a to konkr\u00e9tne Recyclerview. Tento prvok bude zobrazova\u0165 zoznam receptov. Obrazovky u\u017eivatelsk\u00e9ho rozhrania bud\u00fa tvoren\u00e9 z dvoch fragmentov: ListFagment, DetailFragment.","title":"\u00davod"},{"location":"#co-je-to-recycleview","text":"RecyclerView je pokro\u010dilej\u0161ia a flexibilnej\u0161ia verzia ListView dynamick\u00e9ho layoutu Efekt\u00edvny na zobrazovanie ve\u013ek\u00e9ho mno\u017estvo d\u00e1t, ktor\u00e9 s\u00fa ulo\u017een\u00e9 v \u201erolovacom\u201c zozname. Pri zobrazovan\u00ed automaticky vyu\u017e\u00edva ViewHolder n\u00e1vrhov\u00fd vzor. RecyclerView zjednodu\u0161uje zobrazovanie a spr\u00e1vu ve\u013ek\u00fdch d\u00e1t za pomoci: Layout mana\u017e\u00e9ra ur\u010den\u00e9ho na zobrazovanie polo\u017eiek \u0160tandardn\u00fdch anim\u00e1ci\u00ed pre z\u00e1kladn\u00e9 oper\u00e1cie s prvkami(pridanie odobranie prvkov Zlo\u017eenie RecyclerView Info Viac info o RecyclerView ext. zdroj Viac info o RecyclerView na developer.android.com","title":"\u010co je to Recycleview?"},{"location":"fragmenty/","text":"Pou\u017eitie fragmentov \u00b6 Nasleduj\u00faca \u010das\u0165 bude venovan\u00e1 problematike fragmentov a \u00faprave aplik\u00e1cie tak aby vyu\u017e\u00edvala dva fragmenty pri\u010dom jeden bude zobrazova\u0165 zoznam receptov a druh\u00fd zobraz\u00ed detail receptu. 1. ListFragment \u00b6 Tento fragment preberie funkcionalitu ako mala doteraz hlavna aktivita tj. zobrazi\u0165 v Recyclerview zoznamom receptov. Vytvorte nov\u00fd fragment (Blank) - N\u00e1zov triedy: ListFragment - Vyberte typ fragmentu blank 1.1 Layout fragmentu \u00b6 Layout fragmentu pou\u017eijeme rovnaky ako bol pou\u017eit\u00fd v hlavnej aktivite. ListFragment.java : 1 2 3 4 5 6 7 8 ... @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . recycler_list_layout , container , false ); } ... 1.2 RecylerView \u00b6 Do met\u00f3dy onActivityCreated presunieme funkcionalitu z met\u00f3dy onCreate , ktor\u00e1 je s\u00fa\u010dastou MainActivity.java . Info Met\u00f3da onActivityCreated v \u017eivotnom cykle nasleduje po met\u00f3de onCreateView . Je garantovan\u00e9, \u017ee pri volan\u00ed tejto met\u00f3dy je asociovan\u00e1 aktivita u\u017e vytvoren\u00e1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Override public void onActivityCreated ( @Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); RecyclerView recyclerView = getView (). findViewById ( R . id . listRecyclerView ); // use this setting to improve performance if you know that changes // in content do not change the layout size of the RecyclerView recyclerView . setHasFixedSize ( true ); // use a linear layout manager RecyclerView . LayoutManager layoutManager = new LinearLayoutManager ( getContext ()); recyclerView . setLayoutManager ( layoutManager ); // specify an adapter (see also next example) MyRecipeRecyclerViewAdapter mAdapter ; mAdapter = new MyRecipeRecyclerViewAdapter ( RecipesDataSet . getRecipes ( getContext ()), ( MainActivity ) getActivity ()); recyclerView . setAdapter ( mAdapter ); } Vo vyzna\u010den\u00fdch riadkoch nastali nasledovn\u00e9 zmeny: findViewById nie je s\u00fa\u010das\u0165ou fragmentu, ale je s\u00fa\u010das\u0165ou vytvoren\u00e9ho UI, ktor\u00e9ho in\u0161tanciu z\u00edskate pomocou getView() met\u00f3dy. Context aplik\u00e1cie sa z\u00edska pomocou met\u00f3dy getContext a in\u0161tanciu asociovanej aktivity pomocou getActivity() 2. Detail fragment \u00b6 Rovnak\u00fdm sp\u00f4sobom ako ListFragment vytvorte nov\u00fd fragment s n\u00e1zom DetailFragment . 2.1 Layout fragmentu \u00b6 DetailFragment.java : 1 2 3 4 5 6 @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Inflate the layout for this fragment return inflater . inflate ( R . layout . fragment_detail , container , false ); } 2.2 Factory met\u00f3da \u00b6 Na odoslanie potrebn\u00fdch d\u00e1t do fragmentu sa vyu\u017e\u00edva objekt typu Bundle , ktor\u00fd je odovzdan\u00fd novo vytvoren\u00e9mu fragmentu pomocu met\u00f3dy setArguments . Fragment k dan\u00e9mu objektu mo\u017ee prist\u00fapi\u0165 pomocou met\u00f3dy getArguments . Tento Bundle objekt je spravovany opera\u010dn\u00fdm syst\u00e9mom. Dan\u00fd mechanizus sa vy\u017e\u00edva vzh\u013eadom na fakt, \u017ee fragment m\u00f4\u017ee ma\u0165 iba bezparametrick\u00fd kon\u0161truktor pomocou ktor\u00e9ho opera\u010dn\u00fd syst\u00e9m reinicializuje fragment pri re\u0161tarte aplik\u00e1cie v d\u00f4sledku konfigura\u010dnej zmeny(napr. rotacia obrazovky) . Na vytvorenie nove in\u0161tancie fragmentu sa \u010dasto pou\u017e\u00edva tz. factory met\u00f3da: DetailFragment.java : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 public class DetailFragment extends Fragment { private int position ; private static final String POS_TAG = \"POSITION\" ; public DetailFragment () { } // Factory metoda public static DetailFragment createDetailFragment ( int position ) { DetailFragment detailFragment = new DetailFragment (); Bundle bundle = new Bundle (); bundle . putInt ( POS_TAG , position ); detailFragment . setArguments ( bundle ); return detailFragment ; } @Override public void onCreate ( @Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Load position from arguments assert getArguments () != null ; position = getArguments (). getInt ( POS_TAG , 0 ); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Inflate the layout for this fragment return inflater . inflate ( R . layout . fragment_detail , container , false ); } @Override public void onActivityCreated ( @Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); ImageView img = getView (). findViewById ( R . id . detailImage ); TextView title = getView (). findViewById ( R . id . recipeTitle ); TextView detail = getView (). findViewById ( R . id . recipeDetail ); TextView ingredients = getView (). findViewById ( R . id . recipeIngred ); Recipe recipe = RecipesDataSet . getRecipes ( getContext ()). get ( position ); img . setImageBitmap ( recipe . getBitmapFromAsset ()); title . setText ( recipe . title ); detail . setText ( recipe . detail ); String ingred = TextUtils . join ( \"\\n\\r\" , recipe . ingredients ); ingredients . setText ( ingred ); } } 3. \u00daprava MainActivity \u00b6 Na vytvorenie fragmentu pou\u017e\u00edvame FragmentManager , ktor\u00fd z\u00edskame pomocu met\u00f3dy getSupportFragmentManager alebo getFragmentManager z\u00e1le\u017e\u00ed \u010di pou\u017e\u00edvame fragment zo support kni\u017enice (resp. androidX). MainActivity.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class MainActivity extends AppCompatActivity implements MyRecipeRecyclerViewAdapter . OnRecipeListInteraction { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main_layout ); // Testovanie \u010di u\u017e fragmenty neexistuj\u00fa if (( getSupportFragmentManager (). findFragmentByTag ( \"detailFragment\" ) == null ) && ( getSupportFragmentManager (). findFragmentByTag ( \"listFragment\" ) == null )) { getSupportFragmentManager (). beginTransaction () . replace ( R . id . fragment_container , new ListFragment (), \"listFragment\" ) . commit (); } } // Vytvorenie detail fragmentu @Override public void onRecipeClick ( int position ) { getSupportFragmentManager (). beginTransaction () . replace ( R . id . fragment_container , DetailFragment . createDetailFragment ( position ), \"detailFragment\" ) . addToBackStack ( null ) // Ulozenie do zasobnika fragmentov . commit (); } } Re\u0161tarovanie aplik\u00e1cie vplyvom konfigura\u010dn\u00fdch zmien \u00b6 Vzh\u013eadom na \u017eivotn\u00fd cyklus aplik\u00e1cie a takisto vplyvom konfigura\u010dn\u00fdch zmien treba uva\u017eova\u0165 ako spr\u00e1vne spracova\u0165 re\u0161tartovanie aplik\u00e1cie. Ako vieme po re\u0161tarte aplik\u00e1cie za\u010d\u00edna \u017eivotn\u00fd cyklus zavolan\u00edm met\u00f3dy onCreate v ktorej sa inicializuje hlavn\u00fd fragment ListFragment . Ka\u017ed\u00fd pripojen\u00fd fragment k aktivite prech\u00e1dza tiez re\u0161tartom, ktor\u00fd n\u00e1sledne vy\u00fasti do stavu, kedy je fragment syst\u00e9mom nanovo vytvoren\u00fd a zobrazen\u00fd v rodi\u010dovskom kontajneri. V tomto pr\u00edpade treba o\u0161etri\u0165 aby sme v m\u00e9tode onCreate hlavnej aktivity op\u00e4tovne nevytvorili nov\u00fd fragment. To sa d\u00e1 zabezpe\u010dit n\u00e1jden\u00edm in\u0161tanci existuj\u00faceho fragmentu. 1 getSupportFragmentManager (). findFragmentByTag ( \"listFragment\" ) Tag Fragment je identifikovan\u00fd pomocu Tag tzv. menovky, ktor\u00fa sme ur\u010dili pri transakcii fragmentu.","title":"Fragmenty"},{"location":"fragmenty/#pouzitie-fragmentov","text":"Nasleduj\u00faca \u010das\u0165 bude venovan\u00e1 problematike fragmentov a \u00faprave aplik\u00e1cie tak aby vyu\u017e\u00edvala dva fragmenty pri\u010dom jeden bude zobrazova\u0165 zoznam receptov a druh\u00fd zobraz\u00ed detail receptu.","title":"Pou\u017eitie fragmentov"},{"location":"fragmenty/#1-listfragment","text":"Tento fragment preberie funkcionalitu ako mala doteraz hlavna aktivita tj. zobrazi\u0165 v Recyclerview zoznamom receptov. Vytvorte nov\u00fd fragment (Blank) - N\u00e1zov triedy: ListFragment - Vyberte typ fragmentu blank","title":"1. ListFragment"},{"location":"fragmenty/#11-layout-fragmentu","text":"Layout fragmentu pou\u017eijeme rovnaky ako bol pou\u017eit\u00fd v hlavnej aktivite. ListFragment.java : 1 2 3 4 5 6 7 8 ... @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . recycler_list_layout , container , false ); } ...","title":"1.1 Layout fragmentu"},{"location":"fragmenty/#12-recylerview","text":"Do met\u00f3dy onActivityCreated presunieme funkcionalitu z met\u00f3dy onCreate , ktor\u00e1 je s\u00fa\u010dastou MainActivity.java . Info Met\u00f3da onActivityCreated v \u017eivotnom cykle nasleduje po met\u00f3de onCreateView . Je garantovan\u00e9, \u017ee pri volan\u00ed tejto met\u00f3dy je asociovan\u00e1 aktivita u\u017e vytvoren\u00e1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Override public void onActivityCreated ( @Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); RecyclerView recyclerView = getView (). findViewById ( R . id . listRecyclerView ); // use this setting to improve performance if you know that changes // in content do not change the layout size of the RecyclerView recyclerView . setHasFixedSize ( true ); // use a linear layout manager RecyclerView . LayoutManager layoutManager = new LinearLayoutManager ( getContext ()); recyclerView . setLayoutManager ( layoutManager ); // specify an adapter (see also next example) MyRecipeRecyclerViewAdapter mAdapter ; mAdapter = new MyRecipeRecyclerViewAdapter ( RecipesDataSet . getRecipes ( getContext ()), ( MainActivity ) getActivity ()); recyclerView . setAdapter ( mAdapter ); } Vo vyzna\u010den\u00fdch riadkoch nastali nasledovn\u00e9 zmeny: findViewById nie je s\u00fa\u010das\u0165ou fragmentu, ale je s\u00fa\u010das\u0165ou vytvoren\u00e9ho UI, ktor\u00e9ho in\u0161tanciu z\u00edskate pomocou getView() met\u00f3dy. Context aplik\u00e1cie sa z\u00edska pomocou met\u00f3dy getContext a in\u0161tanciu asociovanej aktivity pomocou getActivity()","title":"1.2 RecylerView"},{"location":"fragmenty/#2-detail-fragment","text":"Rovnak\u00fdm sp\u00f4sobom ako ListFragment vytvorte nov\u00fd fragment s n\u00e1zom DetailFragment .","title":"2. Detail fragment"},{"location":"fragmenty/#21-layout-fragmentu","text":"DetailFragment.java : 1 2 3 4 5 6 @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Inflate the layout for this fragment return inflater . inflate ( R . layout . fragment_detail , container , false ); }","title":"2.1 Layout fragmentu"},{"location":"fragmenty/#22-factory-metoda","text":"Na odoslanie potrebn\u00fdch d\u00e1t do fragmentu sa vyu\u017e\u00edva objekt typu Bundle , ktor\u00fd je odovzdan\u00fd novo vytvoren\u00e9mu fragmentu pomocu met\u00f3dy setArguments . Fragment k dan\u00e9mu objektu mo\u017ee prist\u00fapi\u0165 pomocou met\u00f3dy getArguments . Tento Bundle objekt je spravovany opera\u010dn\u00fdm syst\u00e9mom. Dan\u00fd mechanizus sa vy\u017e\u00edva vzh\u013eadom na fakt, \u017ee fragment m\u00f4\u017ee ma\u0165 iba bezparametrick\u00fd kon\u0161truktor pomocou ktor\u00e9ho opera\u010dn\u00fd syst\u00e9m reinicializuje fragment pri re\u0161tarte aplik\u00e1cie v d\u00f4sledku konfigura\u010dnej zmeny(napr. rotacia obrazovky) . Na vytvorenie nove in\u0161tancie fragmentu sa \u010dasto pou\u017e\u00edva tz. factory met\u00f3da: DetailFragment.java : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 public class DetailFragment extends Fragment { private int position ; private static final String POS_TAG = \"POSITION\" ; public DetailFragment () { } // Factory metoda public static DetailFragment createDetailFragment ( int position ) { DetailFragment detailFragment = new DetailFragment (); Bundle bundle = new Bundle (); bundle . putInt ( POS_TAG , position ); detailFragment . setArguments ( bundle ); return detailFragment ; } @Override public void onCreate ( @Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Load position from arguments assert getArguments () != null ; position = getArguments (). getInt ( POS_TAG , 0 ); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Inflate the layout for this fragment return inflater . inflate ( R . layout . fragment_detail , container , false ); } @Override public void onActivityCreated ( @Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); ImageView img = getView (). findViewById ( R . id . detailImage ); TextView title = getView (). findViewById ( R . id . recipeTitle ); TextView detail = getView (). findViewById ( R . id . recipeDetail ); TextView ingredients = getView (). findViewById ( R . id . recipeIngred ); Recipe recipe = RecipesDataSet . getRecipes ( getContext ()). get ( position ); img . setImageBitmap ( recipe . getBitmapFromAsset ()); title . setText ( recipe . title ); detail . setText ( recipe . detail ); String ingred = TextUtils . join ( \"\\n\\r\" , recipe . ingredients ); ingredients . setText ( ingred ); } }","title":"2.2 Factory met\u00f3da"},{"location":"fragmenty/#3-uprava-mainactivity","text":"Na vytvorenie fragmentu pou\u017e\u00edvame FragmentManager , ktor\u00fd z\u00edskame pomocu met\u00f3dy getSupportFragmentManager alebo getFragmentManager z\u00e1le\u017e\u00ed \u010di pou\u017e\u00edvame fragment zo support kni\u017enice (resp. androidX). MainActivity.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class MainActivity extends AppCompatActivity implements MyRecipeRecyclerViewAdapter . OnRecipeListInteraction { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main_layout ); // Testovanie \u010di u\u017e fragmenty neexistuj\u00fa if (( getSupportFragmentManager (). findFragmentByTag ( \"detailFragment\" ) == null ) && ( getSupportFragmentManager (). findFragmentByTag ( \"listFragment\" ) == null )) { getSupportFragmentManager (). beginTransaction () . replace ( R . id . fragment_container , new ListFragment (), \"listFragment\" ) . commit (); } } // Vytvorenie detail fragmentu @Override public void onRecipeClick ( int position ) { getSupportFragmentManager (). beginTransaction () . replace ( R . id . fragment_container , DetailFragment . createDetailFragment ( position ), \"detailFragment\" ) . addToBackStack ( null ) // Ulozenie do zasobnika fragmentov . commit (); } }","title":"3. \u00daprava MainActivity"},{"location":"fragmenty/#restarovanie-aplikacie-vplyvom-konfiguracnych-zmien","text":"Vzh\u013eadom na \u017eivotn\u00fd cyklus aplik\u00e1cie a takisto vplyvom konfigura\u010dn\u00fdch zmien treba uva\u017eova\u0165 ako spr\u00e1vne spracova\u0165 re\u0161tartovanie aplik\u00e1cie. Ako vieme po re\u0161tarte aplik\u00e1cie za\u010d\u00edna \u017eivotn\u00fd cyklus zavolan\u00edm met\u00f3dy onCreate v ktorej sa inicializuje hlavn\u00fd fragment ListFragment . Ka\u017ed\u00fd pripojen\u00fd fragment k aktivite prech\u00e1dza tiez re\u0161tartom, ktor\u00fd n\u00e1sledne vy\u00fasti do stavu, kedy je fragment syst\u00e9mom nanovo vytvoren\u00fd a zobrazen\u00fd v rodi\u010dovskom kontajneri. V tomto pr\u00edpade treba o\u0161etri\u0165 aby sme v m\u00e9tode onCreate hlavnej aktivity op\u00e4tovne nevytvorili nov\u00fd fragment. To sa d\u00e1 zabezpe\u010dit n\u00e1jden\u00edm in\u0161tanci existuj\u00faceho fragmentu. 1 getSupportFragmentManager (). findFragmentByTag ( \"listFragment\" ) Tag Fragment je identifikovan\u00fd pomocu Tag tzv. menovky, ktor\u00fa sme ur\u010dili pri transakcii fragmentu.","title":"Re\u0161tarovanie aplik\u00e1cie vplyvom konfigura\u010dn\u00fdch zmien"},{"location":"new_project/","text":"Vytvorenie nov\u00e9ho projektu \u00b6 Naklonovanie projektu z GIT repozit\u00e1ra. File--> New--> Projetc from Version Control--> Git Url: https://github.com/hudikm/RecyclerViewDemo Po naklonovan\u00ed prenite na branch: start VCS--> Git--> Branches Obsah projektu \u00b6 Java triedy \u00b6 1 2 3 4 ./main/java/sk/fri/uniza/recyclerviewdemo/model/Recipe.java ./main/java/sk/fri/uniza/recyclerviewdemo/model/RecipesDataSet.java ./main/java/sk/fri/uniza/recyclerviewdemo/utilities/LoadData.java ./main/java/sk/fri/uniza/recyclerviewdemo/MainActivity.java Package ./main/java/sk/fri/uniza/recyclerviewdemo/model pr\u00edstup k vygenerovan\u00fdm d\u00e1tam o receptoch. Trieda RecipesDataSet.java \u00b6 Obsahuje met\u00f3du: public static List<Recipe> getRecipes(Context context) Sl\u00fa\u017ei na z\u00edskanie ulo\u017een\u00fdch receptov Parameters: context \u2014 aplika\u010dn\u00fd kontext Returns: list na\u010d\u00edtan\u00fdch receptov Trieda Recipe.java \u00b6 Datov\u00e1 trieda receptu Trieda /utilities/LoadData.java \u00b6 Pomocn\u00e1 trieda na na\u010d\u00edtanie receptov. Priamo sa nepou\u017e\u00edva! Android Resource s\u00fabory \u00b6 Layout s\u00fabory pre zobrazenie receptu 1 2 ./main/res/layout/fragment_recipe_item.xml ./main/res/layout/fragment_recipe_item_cardview.xml Layout s\u00fabory aktivit a fragmentov 1 2 3 ./main/res/layout/fragment_detail.xml ./main/res/layout/recycler_list_layout.xml ./main/res/layout/main_layout.xml","title":"Nov\u00fd projekt"},{"location":"new_project/#vytvorenie-noveho-projektu","text":"Naklonovanie projektu z GIT repozit\u00e1ra. File--> New--> Projetc from Version Control--> Git Url: https://github.com/hudikm/RecyclerViewDemo Po naklonovan\u00ed prenite na branch: start VCS--> Git--> Branches","title":"Vytvorenie nov\u00e9ho projektu"},{"location":"new_project/#obsah-projektu","text":"","title":"Obsah projektu"},{"location":"new_project/#java-triedy","text":"1 2 3 4 ./main/java/sk/fri/uniza/recyclerviewdemo/model/Recipe.java ./main/java/sk/fri/uniza/recyclerviewdemo/model/RecipesDataSet.java ./main/java/sk/fri/uniza/recyclerviewdemo/utilities/LoadData.java ./main/java/sk/fri/uniza/recyclerviewdemo/MainActivity.java Package ./main/java/sk/fri/uniza/recyclerviewdemo/model pr\u00edstup k vygenerovan\u00fdm d\u00e1tam o receptoch.","title":"Java triedy"},{"location":"new_project/#trieda-recipesdatasetjava","text":"Obsahuje met\u00f3du: public static List<Recipe> getRecipes(Context context) Sl\u00fa\u017ei na z\u00edskanie ulo\u017een\u00fdch receptov Parameters: context \u2014 aplika\u010dn\u00fd kontext Returns: list na\u010d\u00edtan\u00fdch receptov","title":"Trieda RecipesDataSet.java"},{"location":"new_project/#trieda-recipejava","text":"Datov\u00e1 trieda receptu","title":"Trieda Recipe.java"},{"location":"new_project/#trieda-utilitiesloaddatajava","text":"Pomocn\u00e1 trieda na na\u010d\u00edtanie receptov. Priamo sa nepou\u017e\u00edva!","title":"Trieda /utilities/LoadData.java"},{"location":"new_project/#android-resource-subory","text":"Layout s\u00fabory pre zobrazenie receptu 1 2 ./main/res/layout/fragment_recipe_item.xml ./main/res/layout/fragment_recipe_item_cardview.xml Layout s\u00fabory aktivit a fragmentov 1 2 3 ./main/res/layout/fragment_detail.xml ./main/res/layout/recycler_list_layout.xml ./main/res/layout/main_layout.xml","title":"Android Resource s\u00fabory"},{"location":"onItemClick/","text":"mermaid.initialize({startOnLoad:true}); Interakcia RecyclerView s Aktivitou \u00b6 Pod pojmom interakcia sa rozumie udalos\u0165 kedy pou\u017e\u00edvatel klikne na polo\u017eku v zozname (\u010falej recept) a n\u00e1sledne sa vyvolan\u00e1 udalos\u0165 obsl\u00fa\u017ei v hlavnej aktivite. sequenceDiagram participant UI as UI participant adapter as RecylerViewAdapter participant act as Aktivita Note over UI: Pou\u017e\u00edvate\u013e klikne na polo\u017eku v zozname UI ->>adapter: onClick() activate adapter adapter->>act: onItemClick() deactivate adapter 1. Definovanie rozhrania (interface) \u00b6 V triede MyRecipeRecyclerViewAdapter definujte nov\u00e9 rozhranie OnRecipeListInteraction , obsahuj\u00face jednu met\u00f3du onRecipeClick(int position) . 1 2 3 4 5 6 7 8 /** * This interface must be implemented by activities that contain this * recycleview to allow an interaction. */ public interface OnRecipeListInteraction { void onRecipeClick ( int position ); } V triede MyRecipeRecyclerViewAdapter definujte nov\u00fd atrib\u00fat, ktor\u00fd bude dr\u017ea\u0165 in\u0161tanciu tohoto rozhrania a do kon\u0161truktora doplte jeho inicializ\u00e1ciu 1 2 3 4 5 6 private final OnRecipeListInteraction mListener ; public MyRecipeRecyclerViewAdapter ( List < Recipe > items , OnRecipeListInteraction listener ) { recipes = items ; mListener = listener ; } 2. Spracovanie udalosti po kliknut\u00ed na recept \u00b6 Na to aby sme mohli spracova\u0165 udalos\u0165 mus\u00edme v triede MyRecipeRecyclerViewAdapter doplni\u0165 do met\u00f3dy onBindViewHolder nasledovn\u00fd k\u00f3d: 1 2 3 4 5 6 7 8 9 10 11 12 13 @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , final int i ) { viewHolder . contentText . setText ( recipes . get ( i ). title ); viewHolder . smallImageView . setImageBitmap ( recipes . get ( i ). getBitmapFromAsset ()); viewHolder . itemView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Send click event to MainActivity mListener . onRecipeClick ( i ); } }); } 2.1 Implent\u00e1cia rozhrania v hlavnej aktivite \u00b6 Ak chceme udalos\u0165, \u017ee pou\u017e\u00edvate\u013e klikol na recept spracova\u0165 v hlavnej aktivite, mus\u00edme implementova\u0165 rozhranie v triede prisl\u00fachaj\u00facej hlavnej aktivite MainActivity . Udalos\u0165 obsl\u00fa\u017eime zobraz\u00edn\u00edm n\u00e1zvu receptu pomocou grafick\u00e9ho prvku Toas . 1 2 3 4 5 6 7 8 public class MainActivity extends AppCompatActivity implements MyRecipeRecyclerViewAdapter . OnRecipeListInteraction { @Override public void onRecipeClick ( int position ) { Toast . makeText ( this , RecipesDataSet . getRecipes ( this ). get ( position ). title , Toast . LENGTH_LONG ). show (); } ... 2.2 Inicializ\u00e1cia MyRecipeRecyclerViewAdapter \u00b6 Posledn\u00fd krok je upravi\u0165 in\u0161tancovanie adapt\u00e9ra MyRecipeRecyclerViewAdapter tak aby zodpovedal nov\u00e9mu kon\u0161truktoru t.j. treba doplni\u0165 referenciu na implementovan\u00e9 rozhranie OnRecipeListInteraction . 1 2 - MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter(RecipesDataSet.getRecipes(this)); + MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter(RecipesDataSet.getRecipes(this), this); Finish : Po tomto kroku by aplik\u00e1cia mala fungova\u0165.","title":"Interakcia RecyclerView s Aktivitou"},{"location":"onItemClick/#interakcia-recyclerview-s-aktivitou","text":"Pod pojmom interakcia sa rozumie udalos\u0165 kedy pou\u017e\u00edvatel klikne na polo\u017eku v zozname (\u010falej recept) a n\u00e1sledne sa vyvolan\u00e1 udalos\u0165 obsl\u00fa\u017ei v hlavnej aktivite. sequenceDiagram participant UI as UI participant adapter as RecylerViewAdapter participant act as Aktivita Note over UI: Pou\u017e\u00edvate\u013e klikne na polo\u017eku v zozname UI ->>adapter: onClick() activate adapter adapter->>act: onItemClick() deactivate adapter","title":"Interakcia RecyclerView s Aktivitou"},{"location":"onItemClick/#1-definovanie-rozhrania-interface","text":"V triede MyRecipeRecyclerViewAdapter definujte nov\u00e9 rozhranie OnRecipeListInteraction , obsahuj\u00face jednu met\u00f3du onRecipeClick(int position) . 1 2 3 4 5 6 7 8 /** * This interface must be implemented by activities that contain this * recycleview to allow an interaction. */ public interface OnRecipeListInteraction { void onRecipeClick ( int position ); } V triede MyRecipeRecyclerViewAdapter definujte nov\u00fd atrib\u00fat, ktor\u00fd bude dr\u017ea\u0165 in\u0161tanciu tohoto rozhrania a do kon\u0161truktora doplte jeho inicializ\u00e1ciu 1 2 3 4 5 6 private final OnRecipeListInteraction mListener ; public MyRecipeRecyclerViewAdapter ( List < Recipe > items , OnRecipeListInteraction listener ) { recipes = items ; mListener = listener ; }","title":"1. Definovanie rozhrania (interface)"},{"location":"onItemClick/#2-spracovanie-udalosti-po-kliknuti-na-recept","text":"Na to aby sme mohli spracova\u0165 udalos\u0165 mus\u00edme v triede MyRecipeRecyclerViewAdapter doplni\u0165 do met\u00f3dy onBindViewHolder nasledovn\u00fd k\u00f3d: 1 2 3 4 5 6 7 8 9 10 11 12 13 @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , final int i ) { viewHolder . contentText . setText ( recipes . get ( i ). title ); viewHolder . smallImageView . setImageBitmap ( recipes . get ( i ). getBitmapFromAsset ()); viewHolder . itemView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Send click event to MainActivity mListener . onRecipeClick ( i ); } }); }","title":"2. Spracovanie udalosti po kliknut\u00ed na recept"},{"location":"onItemClick/#21-implentacia-rozhrania-v-hlavnej-aktivite","text":"Ak chceme udalos\u0165, \u017ee pou\u017e\u00edvate\u013e klikol na recept spracova\u0165 v hlavnej aktivite, mus\u00edme implementova\u0165 rozhranie v triede prisl\u00fachaj\u00facej hlavnej aktivite MainActivity . Udalos\u0165 obsl\u00fa\u017eime zobraz\u00edn\u00edm n\u00e1zvu receptu pomocou grafick\u00e9ho prvku Toas . 1 2 3 4 5 6 7 8 public class MainActivity extends AppCompatActivity implements MyRecipeRecyclerViewAdapter . OnRecipeListInteraction { @Override public void onRecipeClick ( int position ) { Toast . makeText ( this , RecipesDataSet . getRecipes ( this ). get ( position ). title , Toast . LENGTH_LONG ). show (); } ...","title":"2.1 Implent\u00e1cia rozhrania v hlavnej aktivite"},{"location":"onItemClick/#22-inicializacia-myreciperecyclerviewadapter","text":"Posledn\u00fd krok je upravi\u0165 in\u0161tancovanie adapt\u00e9ra MyRecipeRecyclerViewAdapter tak aby zodpovedal nov\u00e9mu kon\u0161truktoru t.j. treba doplni\u0165 referenciu na implementovan\u00e9 rozhranie OnRecipeListInteraction . 1 2 - MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter(RecipesDataSet.getRecipes(this)); + MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter(RecipesDataSet.getRecipes(this), this); Finish : Po tomto kroku by aplik\u00e1cia mala fungova\u0165.","title":"2.2 Inicializ\u00e1cia MyRecipeRecyclerViewAdapter"},{"location":"recyclerview_prve_kroky/","text":"K\u013eu\u010dov\u00e9 kroky: \u00b6 Pou\u017eitie RecyclerView m\u00e1 nasleduj\u00face k\u013e\u00fa\u010dov\u00e9 kroky: Pridajte podporn\u00fa kni\u017enicu RecyclerView do s\u00faboru build.gradle (module) Definujte triedu model, ktor\u00e1 bude pou\u017eit\u00e1 ako zdroj \u00fadajov Pridajte do svojej aktivity RecyclerView Vytvorte si vlastn\u00fd XML layout s\u00fabor ako m\u00e1 vyzera\u0165 riadok na zobrazenie jednej polo\u017eky Vytvorte RecyclerView.Adapter a ViewHolder na vykreslenie polo\u017eky Pripojte adapt\u00e9r zo zdrojom \u00fadajov a nasledne ho odovzdejte RecyclerView 1. Pridanie support kniznice \u00b6 app/build.gradle 1 2 3 4 5 6 7 8 9 dependencies { ... implementation 'com.android.support:cardview-v7:28.0.0' implementation 'com.android.support:support-v4:28.0.0' testImplementation 'junit:junit:4.12' androidTestImplementation 'com.android.support.test:runner:1.0.2' androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2' + implementation 'com.android.support:recyclerview-v7:28.0.0' } 2. Definovanie modelu \u00b6 Model je vytvoren\u00fd v s\u00fabore model/Recipe.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 public class Recipe { @JsonIgnore private static Context contex = null ; @JsonProperty ( \"title\" ) public String title ; @JsonProperty ( \"ingredients\" ) public List < String > ingredients = null ; @JsonProperty ( \"detail\" ) public String detail ; @JsonProperty ( \"image_url\" ) public String imageUrl ; @JsonIgnore private Map < String , Object > additionalProperties = new HashMap < String , Object >(); @JsonAnyGetter public Map < String , Object > getAdditionalProperties () { return this . additionalProperties ; } @JsonAnySetter public void setAdditionalProperty ( String name , Object value ) { this . additionalProperties . put ( name , value ); } @JsonIgnore public static void setContext ( Context appcontext ) { contex = appcontext ; } @JsonIgnore public Bitmap getBitmapFromAsset () { assert contex != null ; return getBitmapFromAsset ( contex ); } @JsonIgnore public Bitmap getBitmapFromAsset ( Context context ) { AssetManager assetManager = context . getAssets (); InputStream istr ; Bitmap bitmap = null ; try { istr = assetManager . open ( imageUrl ); bitmap = BitmapFactory . decodeStream ( istr ); } catch ( IOException e ) { e . printStackTrace (); } return bitmap ; } } 3. Vytvorenie RecyclerView v ramci layout s\u00fabora \u00b6 V s\u00fabore ./main/res/layout/recycler_list_layout.xml vytvorte RecycleView 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.v7.widget.RecyclerView xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/listRecyclerView\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:layout_marginStart= \"0dp\" android:layout_marginEnd= \"2dp\" tools:listitem= \"@layout/fragment_recipe_item\" /> 4. Vytvorenie rozlo\u017eenia jedn\u00e9ho riadku \u00b6 Tento layout s\u00fabor m\u00f4\u017ee by\u0165 vytvoren\u00fd v /res/layout/fragment_recipe_item.xml a bude vykreslen\u00fd pre ka\u017ed\u00fd riadok. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:clickable=\"true\" android:focusable=\"true\" android:foreground=\"?android:attr/selectableItemBackground\" android:orientation=\"vertical\"> <ImageView android:id=\"@+id/smallImage\" android:layout_width=\"42dp\" android:layout_height=\"42dp\" android:layout_gravity=\"center\" android:scaleType=\"centerCrop\" android:textAppearance=\"?attr/textAppearanceListItem\" tools:srcCompat=\"@mipmap/ic_launcher\" /> <TextView android:id=\"@+id/contentTxt\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:layout_marginTop=\"2dp\" android:gravity=\"center\" android:textAppearance=\"?attr/textAppearanceListItem\" tools:text=\"recept xy\" /> </LinearLayout> 5. Vytvorenie RecyclerView adapt\u00e9ra \u00b6 Pred samotn\u00fdm vytvoren\u00edm RecyclerView adapt\u00e9ra je potrebn\u00e9 vytvori\u0165 pomocn\u00fa triedu ViewHolder. 5.1 Trieda ViewHolder \u00b6 Vytvorte nov\u00fd triedu Viewholder , ktor\u00e1 je potomkom RecylerView.Vieholder Info ViewHolder trieda m\u00f4\u017ee by\u0165 implementovan\u00e1 ako vnoren\u00e1 trieda priamo v triede MyRecipeRecyclerViewAdapter Viewholder zasobn\u00edk UI komponentov Upravte ViewHolder triedu tak aby na\u0161la a dr\u017eala in\u0161tancie UI objektov, ktor\u00e9 reprezentuj\u00fa riadok RecyclerView. Jeden riadok je reprezentovan\u00fd layout s\u00faborom, napr. /layout/fragment_recipe_item.xml S\u00fabor ViewHolder.java 1 2 3 4 5 6 7 8 9 10 11 12 public class ViewHolder extends RecyclerView . ViewHolder { ImageView smallImageView ; TextView contentText ; public ViewHolder ( @NonNull View itemView ) { super ( itemView ); contentText = itemView . findViewById ( R . id . contentTxt ); smallImageView = itemView . findViewById ( R . id . smallImage ); } } 5.2 Trieda MyRecipeRecyclerViewAdapter \u00b6 Vytvorte nov\u00fa triedu MyRecipeRecyclerViewAdapter , ktor\u00e1 je potomkom RecyclerView.Adapter<ViewHolder> Naimplementuj nasledovn\u00e9 met\u00f3dy S\u00fabor MyRecipeRecyclerViewAdapter.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package sk.fri.uniza.recyclerviewdemo ; import android.support.annotation.NonNull ; import android.support.v7.widget.RecyclerView ; import android.view.ViewGroup ; public class MyRecipeRecyclerViewAdapter extends RecyclerView . Adapter < ViewHolder > { @NonNull @Override public ViewHolder onCreateViewHolder ( @NonNull ViewGroup viewGroup , int i ) { return null ; } @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , int i ) { } @Override public int getItemCount () { return 0 ; } } 5.3 Z\u00edskanie a ulo\u017eenie zoznamu receptov \u00b6 Pridajte do triedy MyRecipeRecyclerViewAdapter nov\u00fd priv\u00e1tny atrib\u00fat typu List<Recipe> recipes a n\u00e1sledneho inicializujte ako parameter kon\u0161truktora. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class MyRecipeRecyclerViewAdapter extends RecyclerView . Adapter < ViewHolder > { private final List < Recipe > recipes ; public MyRecipeRecyclerViewAdapter ( List < Recipe > recipes ) { this . recipes = recipes ; } // Vr\u00e1tenie ve\u013ekosti datasetu @Override public int getItemCount () { return recipes . size (); } ... 5.4 Vytvorenie UI zobrazen\u00e9ho riadku \u00b6 U\u017eitvate\u013esk\u00e9 rozhranie jedn\u00e9ho riadku sa vytv\u00e1ra v met\u00f3de onCreateViewHolder za pomoci LayoutInflater api. N\u00e1sledne, vytvoren\u00e9 rozhranie sa odovzd\u00e1 do novo vytvoren\u00e9ho objektu ViewHolder , ktor\u00fd m\u00e1 za \u00falohu n\u00e1js\u0165 a udr\u017eiava\u0165 in\u0161tantcie jednotlyv\u00fdch prkov, ktor\u00e9 tvoria jeden riadok. Vytvoren\u00fd objekt ViewHolder sa odovzd\u00e1 a da\u013eej ho u\u017e spravuje adapt\u00e9r recyclerview. 1 2 3 4 5 6 @NonNull @Override public ViewHolder onCreateViewHolder ( @NonNull ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ()). inflate ( R . layout . fragment_recipe_item , viewGroup , false ); return new ViewHolder ( view ); } 5.5 Prepojenie UI s d\u00e1tami z modelu \u00b6 1 2 3 4 5 @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , int i ) { viewHolder . contentText . setText ( recipes . get ( i ). title ); viewHolder . smallImageView . setImageBitmap ( recipes . get ( i ). getBitmapFromAsset ()); } 6. Prepojenie adapt\u00e9ra s RecyclerView \u00b6 S\u00fabor MainActivity.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . recycler_list_layout ); RecyclerView recyclerView = findViewById ( R . id . listRecyclerView ); // use this setting to improve performance if you know that changes // in content do not change the layout size of the RecyclerView recyclerView . setHasFixedSize ( true ); // use a linear layout manager RecyclerView . LayoutManager layoutManager = new LinearLayoutManager ( this ); recyclerView . setLayoutManager ( layoutManager ); // specify an adapter (see also next example) MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter ( RecipesDataSet . getRecipes ( this )); recyclerView . setAdapter ( mAdapter ); } } Hotovo - Spustenie aplik\u00e1cie \u00b6 Spustite aplik\u00e1ciu, aplik\u00e1cia zobraz\u00ed zoznam receptov.","title":"Postup implement\u00e1cie RecyclerView"},{"location":"recyclerview_prve_kroky/#klucove-kroky","text":"Pou\u017eitie RecyclerView m\u00e1 nasleduj\u00face k\u013e\u00fa\u010dov\u00e9 kroky: Pridajte podporn\u00fa kni\u017enicu RecyclerView do s\u00faboru build.gradle (module) Definujte triedu model, ktor\u00e1 bude pou\u017eit\u00e1 ako zdroj \u00fadajov Pridajte do svojej aktivity RecyclerView Vytvorte si vlastn\u00fd XML layout s\u00fabor ako m\u00e1 vyzera\u0165 riadok na zobrazenie jednej polo\u017eky Vytvorte RecyclerView.Adapter a ViewHolder na vykreslenie polo\u017eky Pripojte adapt\u00e9r zo zdrojom \u00fadajov a nasledne ho odovzdejte RecyclerView","title":"K\u013eu\u010dov\u00e9 kroky:"},{"location":"recyclerview_prve_kroky/#1-pridanie-support-kniznice","text":"app/build.gradle 1 2 3 4 5 6 7 8 9 dependencies { ... implementation 'com.android.support:cardview-v7:28.0.0' implementation 'com.android.support:support-v4:28.0.0' testImplementation 'junit:junit:4.12' androidTestImplementation 'com.android.support.test:runner:1.0.2' androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2' + implementation 'com.android.support:recyclerview-v7:28.0.0' }","title":"1. Pridanie support kniznice"},{"location":"recyclerview_prve_kroky/#2-definovanie-modelu","text":"Model je vytvoren\u00fd v s\u00fabore model/Recipe.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 public class Recipe { @JsonIgnore private static Context contex = null ; @JsonProperty ( \"title\" ) public String title ; @JsonProperty ( \"ingredients\" ) public List < String > ingredients = null ; @JsonProperty ( \"detail\" ) public String detail ; @JsonProperty ( \"image_url\" ) public String imageUrl ; @JsonIgnore private Map < String , Object > additionalProperties = new HashMap < String , Object >(); @JsonAnyGetter public Map < String , Object > getAdditionalProperties () { return this . additionalProperties ; } @JsonAnySetter public void setAdditionalProperty ( String name , Object value ) { this . additionalProperties . put ( name , value ); } @JsonIgnore public static void setContext ( Context appcontext ) { contex = appcontext ; } @JsonIgnore public Bitmap getBitmapFromAsset () { assert contex != null ; return getBitmapFromAsset ( contex ); } @JsonIgnore public Bitmap getBitmapFromAsset ( Context context ) { AssetManager assetManager = context . getAssets (); InputStream istr ; Bitmap bitmap = null ; try { istr = assetManager . open ( imageUrl ); bitmap = BitmapFactory . decodeStream ( istr ); } catch ( IOException e ) { e . printStackTrace (); } return bitmap ; } }","title":"2. Definovanie modelu"},{"location":"recyclerview_prve_kroky/#3-vytvorenie-recyclerview-v-ramci-layout-subora","text":"V s\u00fabore ./main/res/layout/recycler_list_layout.xml vytvorte RecycleView 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.v7.widget.RecyclerView xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/listRecyclerView\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:layout_marginStart= \"0dp\" android:layout_marginEnd= \"2dp\" tools:listitem= \"@layout/fragment_recipe_item\" />","title":"3. Vytvorenie RecyclerView v ramci layout s\u00fabora"},{"location":"recyclerview_prve_kroky/#4-vytvorenie-rozlozenia-jedneho-riadku","text":"Tento layout s\u00fabor m\u00f4\u017ee by\u0165 vytvoren\u00fd v /res/layout/fragment_recipe_item.xml a bude vykreslen\u00fd pre ka\u017ed\u00fd riadok. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:clickable=\"true\" android:focusable=\"true\" android:foreground=\"?android:attr/selectableItemBackground\" android:orientation=\"vertical\"> <ImageView android:id=\"@+id/smallImage\" android:layout_width=\"42dp\" android:layout_height=\"42dp\" android:layout_gravity=\"center\" android:scaleType=\"centerCrop\" android:textAppearance=\"?attr/textAppearanceListItem\" tools:srcCompat=\"@mipmap/ic_launcher\" /> <TextView android:id=\"@+id/contentTxt\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:layout_marginTop=\"2dp\" android:gravity=\"center\" android:textAppearance=\"?attr/textAppearanceListItem\" tools:text=\"recept xy\" /> </LinearLayout>","title":"4. Vytvorenie rozlo\u017eenia jedn\u00e9ho riadku"},{"location":"recyclerview_prve_kroky/#5-vytvorenie-recyclerview-adaptera","text":"Pred samotn\u00fdm vytvoren\u00edm RecyclerView adapt\u00e9ra je potrebn\u00e9 vytvori\u0165 pomocn\u00fa triedu ViewHolder.","title":"5. Vytvorenie RecyclerView adapt\u00e9ra"},{"location":"recyclerview_prve_kroky/#51-trieda-viewholder","text":"Vytvorte nov\u00fd triedu Viewholder , ktor\u00e1 je potomkom RecylerView.Vieholder Info ViewHolder trieda m\u00f4\u017ee by\u0165 implementovan\u00e1 ako vnoren\u00e1 trieda priamo v triede MyRecipeRecyclerViewAdapter Viewholder zasobn\u00edk UI komponentov Upravte ViewHolder triedu tak aby na\u0161la a dr\u017eala in\u0161tancie UI objektov, ktor\u00e9 reprezentuj\u00fa riadok RecyclerView. Jeden riadok je reprezentovan\u00fd layout s\u00faborom, napr. /layout/fragment_recipe_item.xml S\u00fabor ViewHolder.java 1 2 3 4 5 6 7 8 9 10 11 12 public class ViewHolder extends RecyclerView . ViewHolder { ImageView smallImageView ; TextView contentText ; public ViewHolder ( @NonNull View itemView ) { super ( itemView ); contentText = itemView . findViewById ( R . id . contentTxt ); smallImageView = itemView . findViewById ( R . id . smallImage ); } }","title":"5.1 Trieda ViewHolder"},{"location":"recyclerview_prve_kroky/#52-trieda-myreciperecyclerviewadapter","text":"Vytvorte nov\u00fa triedu MyRecipeRecyclerViewAdapter , ktor\u00e1 je potomkom RecyclerView.Adapter<ViewHolder> Naimplementuj nasledovn\u00e9 met\u00f3dy S\u00fabor MyRecipeRecyclerViewAdapter.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package sk.fri.uniza.recyclerviewdemo ; import android.support.annotation.NonNull ; import android.support.v7.widget.RecyclerView ; import android.view.ViewGroup ; public class MyRecipeRecyclerViewAdapter extends RecyclerView . Adapter < ViewHolder > { @NonNull @Override public ViewHolder onCreateViewHolder ( @NonNull ViewGroup viewGroup , int i ) { return null ; } @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , int i ) { } @Override public int getItemCount () { return 0 ; } }","title":"5.2 Trieda MyRecipeRecyclerViewAdapter"},{"location":"recyclerview_prve_kroky/#53-ziskanie-a-ulozenie-zoznamu-receptov","text":"Pridajte do triedy MyRecipeRecyclerViewAdapter nov\u00fd priv\u00e1tny atrib\u00fat typu List<Recipe> recipes a n\u00e1sledneho inicializujte ako parameter kon\u0161truktora. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class MyRecipeRecyclerViewAdapter extends RecyclerView . Adapter < ViewHolder > { private final List < Recipe > recipes ; public MyRecipeRecyclerViewAdapter ( List < Recipe > recipes ) { this . recipes = recipes ; } // Vr\u00e1tenie ve\u013ekosti datasetu @Override public int getItemCount () { return recipes . size (); } ...","title":"5.3 Z\u00edskanie a ulo\u017eenie zoznamu receptov"},{"location":"recyclerview_prve_kroky/#54-vytvorenie-ui-zobrazeneho-riadku","text":"U\u017eitvate\u013esk\u00e9 rozhranie jedn\u00e9ho riadku sa vytv\u00e1ra v met\u00f3de onCreateViewHolder za pomoci LayoutInflater api. N\u00e1sledne, vytvoren\u00e9 rozhranie sa odovzd\u00e1 do novo vytvoren\u00e9ho objektu ViewHolder , ktor\u00fd m\u00e1 za \u00falohu n\u00e1js\u0165 a udr\u017eiava\u0165 in\u0161tantcie jednotlyv\u00fdch prkov, ktor\u00e9 tvoria jeden riadok. Vytvoren\u00fd objekt ViewHolder sa odovzd\u00e1 a da\u013eej ho u\u017e spravuje adapt\u00e9r recyclerview. 1 2 3 4 5 6 @NonNull @Override public ViewHolder onCreateViewHolder ( @NonNull ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ()). inflate ( R . layout . fragment_recipe_item , viewGroup , false ); return new ViewHolder ( view ); }","title":"5.4 Vytvorenie UI zobrazen\u00e9ho riadku"},{"location":"recyclerview_prve_kroky/#55-prepojenie-ui-s-datami-z-modelu","text":"1 2 3 4 5 @Override public void onBindViewHolder ( @NonNull ViewHolder viewHolder , int i ) { viewHolder . contentText . setText ( recipes . get ( i ). title ); viewHolder . smallImageView . setImageBitmap ( recipes . get ( i ). getBitmapFromAsset ()); }","title":"5.5 Prepojenie UI s d\u00e1tami z modelu"},{"location":"recyclerview_prve_kroky/#6-prepojenie-adaptera-s-recyclerview","text":"S\u00fabor MainActivity.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . recycler_list_layout ); RecyclerView recyclerView = findViewById ( R . id . listRecyclerView ); // use this setting to improve performance if you know that changes // in content do not change the layout size of the RecyclerView recyclerView . setHasFixedSize ( true ); // use a linear layout manager RecyclerView . LayoutManager layoutManager = new LinearLayoutManager ( this ); recyclerView . setLayoutManager ( layoutManager ); // specify an adapter (see also next example) MyRecipeRecyclerViewAdapter mAdapter = new MyRecipeRecyclerViewAdapter ( RecipesDataSet . getRecipes ( this )); recyclerView . setAdapter ( mAdapter ); } }","title":"6. Prepojenie adapt\u00e9ra s RecyclerView"},{"location":"recyclerview_prve_kroky/#hotovo-spustenie-aplikacie","text":"Spustite aplik\u00e1ciu, aplik\u00e1cia zobraz\u00ed zoznam receptov.","title":"Hotovo - Spustenie aplik\u00e1cie"}]}